services:
  frontend:
    image: ghcr.io/profiidev/images/node-alpine-dev:main
    pull_policy: always
    volumes:
      - ../../:/app
    tty: true
    networks:
      - nginx
    # command: npm install
    command: npm run dev -- --host
    working_dir: /app/apps/s3/frontend

  backend:
    image: ghcr.io/profiidev/images/rust-musl-watch:main
    pull_policy: always
    volumes:
      - ../../:/app
    networks:
      - nginx
    ports:
      - '9000:9000'
    tty: true
    entrypoint: ['tini', '--']
    command: ['cargo', 'watch', '-x', 'run', '-C', 'apps/s3/backend']
    environment:
      - RUST_LIB_BACKTRACE=0
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=test
      - POSTGRES_USER=test
      - POSTGRES_DB=test
    networks:
      - nginx
    ports:
      - '9302:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'test']
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
      start_interval: 1s

  nginx:
    image: nginx:latest
    volumes:
      - ../../nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '5173:5173'
    networks:
      - nginx
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    depends_on:
      - frontend
      - backend

networks:
  nginx:
